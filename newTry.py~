import sympy

def RBF (x1, x2, s):
    # x1, x2: 3D points expressed as row matrices
    R = ( x1.distance(x2)**2 + s**2)**0.5
    return R 
    
def closestPoint(lp, vertPos): #landmark point, query points
    e = []
    for m in range(0, (len(vertPos)-1)):
        w = lp.distance(vertPos[m])
        if w != 0:
            e.append(w)
    return min(e)
    
    
#M: matrix of evaluated RBF for each landmark point
M = sympy.eye(6)

for i in range(0,5):
    for j in range(0,5) :
        x1 = sympy.Point3D(sourceVtcs[sourceLM[i]])
        x2 = sympy.Point3D(targetVtcs[targetLM[j]])
        s = closestPoint(x2, sourceVtcs)
        M[i,j] = RBF(x1, x2, s)

#matrix of "actual" result values as f(x) --> x
F = sympy.zeros(6,3)
for i in range(0,5):
    for j in range(0,2):
            F[i,j] = targetVtcs[targetLM[i]][j]

MInv = M.inv()
X = MInv * F
